1.Understand the Problem:
Explain why data structures and algorithms are essential in handling large inventories.
A:Data structures and algorithms are essential in handling large inventories because they enable efficient storage,
 retrieval, and management of data. With a large number of products, operations such as adding, updating, and deleting items need to be performed 
 quickly to ensure smooth operation of the inventory management system.

Discuss the types of data structures suitable for this problem.
A:ArrayList: Good for maintaining a list of products where the order matters. It allows fast random access, but inserting and deleting elements (except at the end) can be slow.
HashMap: Ideal for cases where quick lookup, insertion, and deletion by key are required. It offers average-case constant time complexity for these operations.

4.Analysis:
Analyze the time complexity of each operation (add, update, delete) in your chosen data structure.
A:Add Product: O(1) on average because a HashMap provides constant time complexity for insertions.
Update Product: O(1) on average for lookup and update operations in a HashMap.
Delete Product: O(1) on average for deletions in a HashMap.


Discuss how you can optimize these operations.
A:Space Complexity: Using a HashMap increases space complexity due to the underlying array and linked list (or tree) structures used in its implementation. However, this trade-off is acceptable given the benefits in time complexity.
Concurrency: For a multi-threaded environment, consider using ConcurrentHashMap instead of HashMap to handle concurrent modifications.
